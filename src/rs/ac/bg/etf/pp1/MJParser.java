
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 10 00:18:21 CET 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.Collection;
import java.util.Iterator;
import java_cup.runtime.Symbol;
import org.apache.log4j.Logger;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 10 00:18:21 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\054\002\000\002\055\002\000\002\025" +
    "\014\000\002\002\004\000\002\037\003\000\002\026\004" +
    "\000\002\026\002\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\033\005\000\002\033\006\000\002" +
    "\033\005\000\002\021\005\000\002\021\003\000\002\021" +
    "\006\000\002\021\005\000\002\020\005\000\002\020\003" +
    "\000\002\020\006\000\002\020\005\000\002\022\003\000" +
    "\002\022\005\000\002\044\003\000\002\036\006\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\056\002\000\002\057\002\000\002\035\015\000" +
    "\002\014\004\000\002\014\002\000\002\015\005\000\002" +
    "\015\002\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\013\004\000\002\013\002\000\002\034\004\000" +
    "\002\034\002\000\002\060\002\000\002\061\002\000\002" +
    "\062\002\000\002\012\020\000\002\045\003\000\002\045" +
    "\003\000\002\030\003\000\002\030\002\000\002\011\005" +
    "\000\002\011\003\000\002\010\004\000\002\010\006\000" +
    "\002\031\004\000\002\031\002\000\002\032\003\000\002" +
    "\032\003\000\002\003\007\000\002\003\011\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\005" +
    "\000\002\004\005\000\002\063\002\000\002\004\010\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\007\000\002\004\011\000\002\024\005\000\002\024\003" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\005\000\002\046\005\000\002\046\003\000\002" +
    "\047\005\000\002\047\003\000\002\047\004\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\004\000\002\050\007\000\002\050\005\000" +
    "\002\050\003\000\002\050\006\000\002\040\003\000\002" +
    "\040\005\000\002\064\002\000\002\040\007\000\002\023" +
    "\003\000\002\023\002\000\002\007\005\000\002\007\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\042\002\000\002\043\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\017\005\001\002\000\004\002\342\001" +
    "\002\000\004\054\007\001\002\000\012\005\uff88\020\uff88" +
    "\035\uff88\054\uff88\001\002\000\012\005\ufffd\020\ufffd\035" +
    "\ufffd\054\ufffd\001\002\000\012\005\ufffb\020\ufffb\035\ufffb" +
    "\054\ufffb\001\002\000\012\005\022\020\013\035\021\054" +
    "\014\001\002\000\006\003\325\054\061\001\002\000\010" +
    "\006\uffd1\021\uffd1\054\uffd1\001\002\000\054\003\uffea\020" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\034\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea\054\uffea" +
    "\001\002\000\012\005\ufff9\020\ufff9\035\ufff9\054\ufff9\001" +
    "\002\000\012\005\ufffa\020\ufffa\035\ufffa\054\ufffa\001\002" +
    "\000\012\005\ufffc\020\ufffc\035\ufffc\054\ufffc\001\002\000" +
    "\012\005\ufff8\020\ufff8\035\ufff8\054\ufff8\001\002\000\004" +
    "\054\040\001\002\000\004\054\014\001\002\000\004\054" +
    "\025\001\002\000\006\026\uffe7\027\uffe7\001\002\000\004" +
    "\007\032\001\002\000\006\026\027\027\030\001\002\000" +
    "\004\054\025\001\002\000\012\005\uffe9\020\uffe9\035\uffe9" +
    "\054\uffe9\001\002\000\006\026\uffe8\027\uffe8\001\002\000" +
    "\012\052\033\053\037\055\034\056\036\001\002\000\006" +
    "\026\uffe5\027\uffe5\001\002\000\006\026\uffe3\027\uffe3\001" +
    "\002\000\006\026\uffe6\027\uffe6\001\002\000\006\026\uffe2" +
    "\027\uffe2\001\002\000\006\026\uffe4\027\uffe4\001\002\000" +
    "\006\004\uffe1\020\uffe1\001\002\000\006\004\uff88\020\uff88" +
    "\001\002\000\006\004\044\020\uffdd\001\002\000\004\020" +
    "\046\001\002\000\004\054\014\001\002\000\004\020\uffde" +
    "\001\002\000\010\020\uffd3\021\uffd3\054\uffd3\001\002\000" +
    "\010\020\050\021\uffdb\054\014\001\002\000\010\006\uffd1" +
    "\021\uffd1\054\uffd1\001\002\000\006\003\057\054\061\001" +
    "\002\000\010\020\uffd4\021\uffd4\054\uffd4\001\002\000\004" +
    "\021\054\001\002\000\012\005\uffe0\020\uffe0\035\uffe0\054" +
    "\uffe0\001\002\000\012\005\uff87\020\uff87\035\uff87\054\uff87" +
    "\001\002\000\012\005\uffdf\020\uffdf\035\uffdf\054\uffdf\001" +
    "\002\000\014\020\uffd5\021\uffd5\026\074\027\075\054\uffd5" +
    "\001\002\000\016\003\uffef\020\uffef\021\uffef\026\uffef\027" +
    "\uffef\054\uffef\001\002\000\020\003\uffec\020\uffec\021\uffec" +
    "\024\072\026\uffec\027\uffec\054\uffec\001\002\000\016\003" +
    "\064\020\uffd9\021\uffd9\026\063\027\065\054\uffd9\001\002" +
    "\000\004\054\061\001\002\000\014\020\uffd7\021\uffd7\026" +
    "\066\027\067\054\uffd7\001\002\000\010\020\uffda\021\uffda" +
    "\054\uffda\001\002\000\004\054\061\001\002\000\010\020" +
    "\uffd8\021\uffd8\054\uffd8\001\002\000\016\003\uffee\020\uffee" +
    "\021\uffee\026\uffee\027\uffee\054\uffee\001\002\000\016\003" +
    "\ufff0\020\ufff0\021\ufff0\026\ufff0\027\ufff0\054\ufff0\001\002" +
    "\000\004\025\073\001\002\000\016\003\uffeb\020\uffeb\021" +
    "\uffeb\026\uffeb\027\uffeb\054\uffeb\001\002\000\004\054\061" +
    "\001\002\000\010\020\uffd6\021\uffd6\054\uffd6\001\002\000" +
    "\016\003\uffed\020\uffed\021\uffed\026\uffed\027\uffed\054\uffed" +
    "\001\002\000\010\006\104\021\102\054\014\001\002\000" +
    "\004\054\105\001\002\000\004\054\uffcc\001\002\000\004" +
    "\021\uffdc\001\002\000\010\006\uffd2\021\uffd2\054\uffd2\001" +
    "\002\000\004\054\uffcb\001\002\000\004\022\uffd0\001\002" +
    "\000\004\022\uff88\001\002\000\004\022\110\001\002\000" +
    "\006\023\uffc9\054\014\001\002\000\006\023\uffc7\026\uffc7" +
    "\001\002\000\004\054\315\001\002\000\004\023\117\001" +
    "\002\000\006\023\uffca\026\115\001\002\000\004\054\014" +
    "\001\002\000\006\023\uffc8\026\uffc8\001\002\000\006\020" +
    "\uffd3\054\uffd3\001\002\000\006\020\121\054\014\001\002" +
    "\000\024\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\020\uffcf\021\uffcf\054\uffcf\001\002\000\024\010\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\054\uffc3\001\002\000\024\010\124\011\134\012\132" +
    "\014\125\015\140\016\136\020\126\021\137\054\127\001" +
    "\002\000\004\022\311\001\002\000\004\022\276\001\002" +
    "\000\024\010\uff88\011\uff88\012\uff88\014\uff88\015\uff88\016" +
    "\uff88\020\uff88\021\uff88\054\uff88\001\002\000\060\007\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\001\002\000\024\010\uffc1\011\uffc1" +
    "\012\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\054" +
    "\uffc1\001\002\000\016\007\255\022\257\024\uff99\032\256" +
    "\033\260\050\173\001\002\000\004\022\226\001\002\000" +
    "\024\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\054\uffc4\001\002\000\004\022\216\001" +
    "\002\000\024\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\020\uffc2\021\uffc2\054\uffc2\001\002\000\024\022" +
    "\157\027\151\030\144\036\146\052\150\053\152\054\127" +
    "\055\156\056\153\001\002\000\010\006\uffce\021\uffce\054" +
    "\uffce\001\002\000\004\027\141\001\002\000\026\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020" +
    "\uffb7\021\uffb7\054\uffb7\001\002\000\010\006\uff87\021\uff87" +
    "\054\uff87\001\002\000\010\006\uffcd\021\uffcd\054\uffcd\001" +
    "\002\000\020\022\157\036\146\052\150\053\152\054\127" +
    "\055\156\056\153\001\002\000\010\027\214\030\163\031" +
    "\162\001\002\000\004\054\014\001\002\000\052\022\175" +
    "\023\uff9d\024\uff99\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\034\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\173\051\uff9d\001" +
    "\002\000\044\023\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\034\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\001\002" +
    "\000\026\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\021\uffb6\054\uffb6\001\002\000\044" +
    "\023\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\034" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\051\uffa3\001\002\000\044\023" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\051\uffa1\001\002\000\044\023\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\034\uffa8\037" +
    "\170\040\166\041\uffa8\042\uffa8\043\uffa8\044\167\045\uffa8" +
    "\046\uffa8\047\uffa8\051\uffa8\001\002\000\044\023\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\034\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\051\uffa6\001\002\000\044\023\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\034\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\051\uffa2\001\002\000\022\022\157\030\144\036" +
    "\146\052\150\053\152\054\127\055\156\056\153\001\002" +
    "\000\010\023\161\030\163\031\162\001\002\000\044\023" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\034\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\051\uff9e\001\002\000\022\022\uff93" +
    "\030\uff93\036\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\001\002\000\022\022\uff92\030\uff92\036\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\001\002\000\022\022" +
    "\157\030\144\036\146\052\150\053\152\054\127\055\156" +
    "\056\153\001\002\000\044\023\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\034\uffa9\037\170\040\166\041\uffa9" +
    "\042\uffa9\043\uffa9\044\167\045\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\001\002\000\020\022\uff8f\036\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\001\002\000\020\022\uff91\036" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\001\002" +
    "\000\020\022\uff90\036\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\001\002\000\020\022\157\036\146\052\150" +
    "\053\152\054\127\055\156\056\153\001\002\000\044\023" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\034\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\051\uffa7\001\002\000\004\054\207" +
    "\001\002\000\004\024\204\001\002\000\024\022\157\023" +
    "\uff96\030\144\036\146\052\150\053\152\054\127\055\156" +
    "\056\153\001\002\000\004\023\203\001\002\000\012\023" +
    "\uff94\026\uff94\030\163\031\162\001\002\000\006\023\uff97" +
    "\026\201\001\002\000\022\022\157\030\144\036\146\052" +
    "\150\053\152\054\127\055\156\056\153\001\002\000\012" +
    "\023\uff95\026\uff95\030\163\031\162\001\002\000\044\023" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\034\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\051\uff9c\001\002\000\022\022\157" +
    "\030\144\036\146\052\150\053\152\054\127\055\156\056" +
    "\153\001\002\000\010\025\206\030\163\031\162\001\002" +
    "\000\060\007\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\001\002\000\060" +
    "\007\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\001\002\000\046\023\uffa0" +
    "\024\211\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\034" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\051\uffa0\001\002\000\022\022" +
    "\157\030\144\036\146\052\150\053\152\054\127\055\156" +
    "\056\153\001\002\000\010\025\213\030\163\031\162\001" +
    "\002\000\044\023\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\034\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\001\002" +
    "\000\026\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\020\uffb5\021\uffb5\054\uffb5\001\002\000\044" +
    "\023\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\034" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\051\uffa5\001\002\000\022\022" +
    "\157\030\144\036\146\052\150\053\152\054\127\055\156" +
    "\056\153\001\002\000\012\023\221\026\220\030\163\031" +
    "\162\001\002\000\004\052\223\001\002\000\004\027\222" +
    "\001\002\000\026\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3\054\uffb3\001\002" +
    "\000\004\023\224\001\002\000\004\027\225\001\002\000" +
    "\026\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\020\uffb2\021\uffb2\054\uffb2\001\002\000\022\022" +
    "\157\030\144\036\146\052\150\053\152\054\127\055\156" +
    "\056\153\001\002\000\030\023\uffab\030\163\031\162\034" +
    "\247\041\252\042\uffab\043\251\045\245\046\246\047\253" +
    "\051\uffab\001\002\000\006\023\235\051\236\001\002\000" +
    "\010\023\uffac\042\uffac\051\uffac\001\002\000\010\023\uffae" +
    "\042\233\051\uffae\001\002\000\022\022\157\030\144\036" +
    "\146\052\150\053\152\054\127\055\156\056\153\001\002" +
    "\000\010\023\uffad\042\uffad\051\uffad\001\002\000\022\010" +
    "\124\011\134\012\132\014\125\015\140\016\136\020\126" +
    "\054\127\001\002\000\022\022\157\030\144\036\146\052" +
    "\150\053\152\054\127\055\156\056\153\001\002\000\010" +
    "\023\uffaf\042\233\051\uffaf\001\002\000\024\010\uffc0\011" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\054\uffc0\001\002\000\026\010\uffc2\011\uffc2\012\uffc2\013" +
    "\242\014\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\054\uffc2" +
    "\001\002\000\022\010\124\011\134\012\132\014\125\015" +
    "\140\016\136\020\126\054\127\001\002\000\024\010\uffbf" +
    "\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021" +
    "\uffbf\054\uffbf\001\002\000\026\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\021\uffb0\054" +
    "\uffb0\001\002\000\022\022\uff89\030\uff89\036\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\001\002\000\022\022" +
    "\uff8c\030\uff8c\036\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\001\002\000\022\022\uff8e\030\uff8e\036\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\001\002\000\022" +
    "\022\157\030\144\036\146\052\150\053\152\054\127\055" +
    "\156\056\153\001\002\000\022\022\uff8a\030\uff8a\036\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000" +
    "\022\022\uff8b\030\uff8b\036\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\001\002\000\022\022\uff8d\030\uff8d\036" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002" +
    "\000\014\023\uffaa\030\163\031\162\042\uffaa\051\uffaa\001" +
    "\002\000\024\003\267\022\157\030\144\036\146\052\150" +
    "\053\152\054\127\055\156\056\153\001\002\000\004\027" +
    "\265\001\002\000\024\022\157\023\uff96\030\144\036\146" +
    "\052\150\053\152\054\127\055\156\056\153\001\002\000" +
    "\004\027\261\001\002\000\026\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\054" +
    "\uffbb\001\002\000\004\023\263\001\002\000\004\027\264" +
    "\001\002\000\026\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc\054\uffbc\001\002" +
    "\000\026\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\020\uffba\021\uffba\054\uffba\001\002\000\010" +
    "\027\271\030\163\031\162\001\002\000\004\027\270\001" +
    "\002\000\026\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\021\uffbd\054\uffbd\001\002\000" +
    "\026\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\021\uffbe\054\uffbe\001\002\000\024\010" +
    "\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3" +
    "\021\uffc3\054\uffc3\001\002\000\024\010\124\011\134\012" +
    "\132\014\125\015\140\016\136\020\126\021\uff87\054\127" +
    "\001\002\000\004\021\275\001\002\000\026\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\021\uffb1\054\uffb1\001\002\000\022\022\uffb9\030\uffb9\036" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002" +
    "\000\022\022\157\030\144\036\146\052\150\053\152\054" +
    "\127\055\156\056\153\001\002\000\006\023\301\051\236" +
    "\001\002\000\022\010\124\011\134\012\302\014\125\015" +
    "\140\016\136\020\126\054\127\001\002\000\004\022\304" +
    "\001\002\000\026\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8\054\uffb8\001\002" +
    "\000\022\022\157\030\144\036\146\052\150\053\152\054" +
    "\127\055\156\056\153\001\002\000\006\023\306\051\236" +
    "\001\002\000\022\010\124\011\134\012\302\014\125\015" +
    "\140\016\136\020\126\054\127\001\002\000\004\013\310" +
    "\001\002\000\022\010\124\011\134\012\302\014\125\015" +
    "\140\016\136\020\126\054\127\001\002\000\004\054\127" +
    "\001\002\000\010\023\313\024\uff99\050\173\001\002\000" +
    "\004\027\314\001\002\000\026\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\054" +
    "\uffb4\001\002\000\010\023\uffc6\024\316\026\uffc6\001\002" +
    "\000\004\025\317\001\002\000\006\023\uffc5\026\uffc5\001" +
    "\002\000\010\006\104\021\001\054\014\001\002\000\004" +
    "\021\322\001\002\000\004\002\000\001\002\000\004\002" +
    "\uff87\001\002\000\004\002\uffff\001\002\000\006\026\337" +
    "\027\340\001\002\000\010\003\ufff3\026\ufff3\027\ufff3\001" +
    "\002\000\010\003\331\026\330\027\332\001\002\000\004" +
    "\054\061\001\002\000\006\026\333\027\334\001\002\000" +
    "\012\005\ufff7\020\ufff7\035\ufff7\054\ufff7\001\002\000\004" +
    "\054\061\001\002\000\012\005\ufff6\020\ufff6\035\ufff6\054" +
    "\ufff6\001\002\000\010\003\ufff2\026\ufff2\027\ufff2\001\002" +
    "\000\010\003\ufff4\026\ufff4\027\ufff4\001\002\000\004\054" +
    "\061\001\002\000\012\005\ufff5\020\ufff5\035\ufff5\054\ufff5" +
    "\001\002\000\010\003\ufff1\026\ufff1\027\ufff1\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\025\003\001\001\000\002\001\001\000" +
    "\004\037\005\001\001\000\004\042\007\001\001\000\002" +
    "\001\001\000\004\026\010\001\001\000\014\027\016\033" +
    "\015\035\014\036\017\044\011\001\001\000\006\021\326" +
    "\022\325\001\001\000\004\034\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\022\001" +
    "\001\000\006\016\025\017\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\040" +
    "\001\001\000\004\042\041\001\001\000\004\014\042\001" +
    "\001\000\002\001\001\000\004\044\044\001\001\000\002" +
    "\001\001\000\004\013\046\001\001\000\010\002\051\015" +
    "\052\044\050\001\001\000\004\034\076\001\001\000\006" +
    "\020\061\022\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\054\001\001\000\004\043\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\102" +
    "\044\100\045\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\105\001\001\000\004\042\106\001\001\000" +
    "\002\001\001\000\012\010\110\011\113\030\112\044\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\115\044\111\001\001" +
    "\000\002\001\001\000\004\013\117\001\001\000\006\002" +
    "\051\044\050\001\001\000\004\061\121\001\001\000\004" +
    "\031\122\001\001\000\012\003\127\004\134\032\132\040" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\146\046" +
    "\144\047\153\050\154\001\001\000\004\062\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\142\001" +
    "\001\000\002\001\001\000\006\040\146\050\214\001\001" +
    "\000\004\052\163\001\001\000\004\044\207\001\001\000" +
    "\004\064\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\146" +
    "\046\157\047\153\050\154\001\001\000\004\052\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\146\047\164\050\154\001\001\000\004\053" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\146\050\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\177" +
    "\023\175\040\146\046\176\047\153\050\154\001\001\000" +
    "\002\001\001\000\004\052\163\001\001\000\002\001\001" +
    "\000\012\040\146\046\201\047\153\050\154\001\001\000" +
    "\004\052\163\001\001\000\002\001\001\000\012\040\146" +
    "\046\204\047\153\050\154\001\001\000\004\052\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\040\146\046\211\047\153\050\154\001\001\000" +
    "\004\052\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\040\146\046\216\047\153\050" +
    "\154\001\001\000\004\052\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\231\006\230" +
    "\024\227\040\146\046\226\047\153\050\154\001\001\000" +
    "\006\051\247\052\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\233\040\146\046" +
    "\226\047\153\050\154\001\001\000\002\001\001\000\012" +
    "\003\127\004\240\032\237\040\130\001\001\000\016\005" +
    "\236\006\230\040\146\046\226\047\153\050\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\242\004\243\040\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\146\046\253\047\153\050\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\163\001\001\000\012\040\146\046\265" +
    "\047\153\050\154\001\001\000\002\001\001\000\016\007" +
    "\177\023\261\040\146\046\176\047\153\050\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\272\001\001\000\014\003\127" +
    "\004\134\032\132\040\130\043\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\276\001\001\000\020" +
    "\005\231\006\230\024\277\040\146\046\226\047\153\050" +
    "\154\001\001\000\002\001\001\000\006\004\302\040\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\231\006\230\024\304\040\146\046\226\047\153\050\154" +
    "\001\001\000\002\001\001\000\006\004\306\040\130\001" +
    "\001\000\002\001\001\000\006\004\243\040\130\001\001" +
    "\000\004\040\311\001\001\000\004\064\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\102\044\100\045" +
    "\077\054\320\001\001\000\002\001\001\000\004\055\322" +
    "\001\001\000\004\043\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));


    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	
	if (s != null && s.value != null){
		log.info(s.toString() + " " + s.value.toString());
	}
	return s;

    }


	
	int classCount=0;
	int methodCount=0;
	int globVarCount=0;
	int globConstCount=0;
	int globArrayCount=0;
	int locVarCountMain=0;
	int funcCallCountMain=0;
	int statBlockCount=0;
	int formParsCounter=0;
	
	Boolean globalScope=true;
	Boolean mainScope=false;
	Boolean classScope=false;
	
	int printCallCount = 0;
	int errorCount=0;
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	errorCount++;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left).append(" na mestu ").append(((Symbol)info).right).append(". Simbol: ").append(((Symbol)info).value.toString());
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	public static final Struct boolType=new Struct(Struct.Bool);
	public static final Struct stringType=new Struct(6);

	Struct currentType = null;
	Obj currentMethod = null;
	Obj currentCallMethod = null;
	Obj currentClass = null;
	boolean returnFound = false;
	Obj index=null;
	
	boolean hasMain=false;
	boolean insideMethod=false, insideClass=false;
	boolean insideWhile = false;
	Struct currentCl = null;
	
	int numActPar=0;
	Collection<Obj> currentMethLocals=null;
	Iterator<Obj> currentMethIterator=null;
	
	Obj currentArray=null;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= LESSEQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GREATEREQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= GREATER 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= ISNOTEQUAL 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= ISEQUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	         	Code.put(Code.pop); // stvarni parametri nisu implementirani, pa da ne ostanu na steku
	         	
	         	numActPar=0;
	         	currentMethLocals=currentCallMethod.getLocalSymbols();
	         	currentMethIterator=currentMethLocals.iterator();
	         	Obj o=null;
	         	
	         	if(currentMethIterator.hasNext()){
	         		o=currentMethIterator.next();
	         		//currentMethIterator.remove();
	         	
	         		if(!e.compatibleWith(o.getType())){
	         			if(!currentCallMethod.getName().equals("len") || e.getKind()!=Struct.Array)	
		         			parser.report_error("Greska na liniji " + eleft + " tipovi formalnog i stvarnog parametra nisu kompatibilni!", null);
	         			else
	         				numActPar++;
	         		}
	         		else
	         			numActPar++;
	         	}
	         	else{
	         		parser.report_error("Greska na liniji " + eleft + " ne slazu se brojevi formalnih i stvarnih parametara.", null);
	         	}
	         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprList ::= ExprList COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Code.put(Code.pop); // stvarni parametri nisu implementirani, pa da ne ostanu na steku
				
				Obj o=null;
				if(currentMethIterator.hasNext()){
	         		o=currentMethIterator.next();
	         		//currentMethIterator.remove();
	         	
	         		if(!e.compatibleWith(o.getType())){
	         			if(!currentCallMethod.getName().equals("len") || e.getKind()!=Struct.Array)	
		         			parser.report_error("Greska na liniji " + eleft + " tipovi formalnog i stvarnog parametra nisu kompatibilni!", null);
	         			else
	         				numActPar++;
	         		}
	         		else
	         			numActPar++;	
	         	}
	         	else{
	         		parser.report_error("Greska na liniji " + eleft + " ne slazu se brojevi formalnih i stvarnih parametara.", null);
	         	}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActPars ::= 
            {
              Object RESULT =null;
		
				if(currentCallMethod.getLevel()>0){
					parser.report_error("Greska: Ne slazu se brojevi formalnih i stvarnih parametara kod funkcije " + currentCallMethod.getName(), null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActPars ::= ExprList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(numActPar!=currentCallMethod.getLevel())
					parser.report_error("Greska linija " +eleft+ ": Ne slazu se brojevi formalnih i stvarnih parametara kod funkcije " + currentCallMethod.getName(), null);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Designator ::= Designator NT$8 LSQBRACE Expr RSQBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(d.getType().getKind()!=Struct.Array){
					parser.report_error("Greska na liniji " + tleft + ": Indeksira se polje " + d.getName() + ", koje nije niz!", null);
					RESULT = new Obj(Obj.Var, "", d.getType());
				}
				else if(t.getKind()!=Struct.Int){
					parser.report_error("Greska na liniji " + tleft + ": ne moze se indeksirati niz tipom " + t.getKind() + "!", null);
					RESULT = new Obj(Obj.Elem, "", d.getType().getElemType());
				}
				else{
					RESULT = new Obj(Obj.Elem, "", d.getType().getElemType());
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$8 ::= 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
Code.load(d);
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Designator ::= Designator POINT IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj obj = Tab.find(name);
				
				if(currentCl!=null){
					boolean flag=false;
					
					for(Obj o:currentCl.getMembers()){
						if(o.getName().equals(name)){
							if(o.getKind()!=Obj.Meth){
								RESULT = new Obj(Obj.Fld, "", o.getType());
								parser.report_info("Linija " + nameleft+ " : Pronadjeno polje " + name + " u klasi! ", null);
							}else{
								RESULT = new Obj(Obj.Meth, "", o.getType());
								currentCallMethod=o;
								parser.report_info("Linija " + nameleft+ " : Pronadjena funkcija " + name + " u klasi! ", null);
							}
							if(o.getType().getKind()==Struct.Class){
								currentCl=o.getType();
							}
							flag=true;
							break;
						}
					}
					
					if(flag==false)
						parser.report_fatal_error("Greska na liniji " + nameleft+ " : ime "+name+" nije deklarisano! ", null);
					
				}
				else{
					parser.report_fatal_error("Greska na liniji " + nameleft+ " : ime "+name+" nije deklarisano! ", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj obj = Tab.find(name);
				
				if (obj == Tab.noObj) {
					parser.report_error("Greska na liniji " + nameleft+ " : ime "+name+" nije deklarisano! ", null);
					RESULT = obj;
				}
				else{
				
					if(obj.getType().getKind()==Struct.Array){
						parser.report_info("Linija " + nameleft + ": Element niza " + name, null);
						RESULT = currentArray = new Obj(Obj.Var, "", obj.getType());
						currentCl=null;
					}
					else if(obj.getType().getKind()==Struct.Class){
						parser.report_info("Linija " + nameleft + ": Objekat klase sa imenom " + name, null);
						RESULT = new Obj(Obj.Var, "", obj.getType());
						currentCl = obj.getType();
					}
					else if(obj.getKind()==Obj.Meth){
						parser.report_info("Linija " + nameleft + ": Funkcija sa imenom " + name, null);
						RESULT = new Obj(Obj.Meth, "", obj.getType());
						currentCl = null;
						currentCallMethod = obj;
					}
					else{
						RESULT = obj;
						currentCl=null;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
			
				int dest_adr=func.getAdr() - Code.pc; // racunanje relativne adrese 
                Code.put(Code.call); 
                Code.put2(dest_adr);
                
                if(parser.mainScope)
                	parser.funcCallCountMain++;
			   
		       	if (Obj.Meth == func.getKind()) { 
		   	   	   parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
		   	   	   RESULT = func.getType();
		   	   	} else {
		   	   	   parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	   	   RESULT = Tab.noType;
		   	   	}
		   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Code.load(d);
				RESULT = d.getType(); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= NEW Type LSQBRACE Expr RSQBRACE 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(e.getKind()!=Struct.Int){
					parser.report_error("Greska na liniji: " + eleft + ": Ne moze se inicijalizovati niz tipom koji nije int.", null);
					RESULT = new Struct(Struct.Array, type);
				}
				else{
					RESULT = new Struct(Struct.Array, type);
					Code.put(Code.newarray);
                    if ( type == Tab.charType )
                    	Code.put(0); 
                    else 
                    	Code.put(1);
				} 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(type.getKind()!=Struct.Class)
					parser.report_error("Greska na liniji: " + typeleft + ": Operator NEW se koristi samo za korisnicki definisane klase.", null);
				
				RESULT = type;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c= new Obj(Obj.Con, "", boolType);
				c.setAdr(i? 1:0);
				Code.load(c);
				RESULT = boolType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= STRCONST 
            {
              Struct RESULT =null;
		
				Obj c= new Obj(Obj.Con, "", stringType);
				RESULT = stringType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c= new Obj(Obj.Con, "", Tab.charType);
				c.setAdr(i.charValue());
				Code.load(c);
				RESULT = Tab.charType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c= new Obj(Obj.Con, "", Tab.intType);
				c.setAdr(i.intValue());
				index=c;
				Code.load(c);
				RESULT = Tab.intType; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Term ::= MINUS Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				if(t.getKind()!=Struct.Int){
					parser.report_error("Greska linija " + tleft + ": Ne moze se koristiti operator MINUS kod operanda koji nije tipa int.", null);
					RESULT = t;
				}else{
					RESULT = t;
					Code.put(Code.neg); 
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if (te.equals(t) && te == Tab.intType){
		 		RESULT = te;
		 		Code.put(op);
		 	}
		 	else {
		 		parser.report_error("Greska na liniji "+ teleft+" : nekompatibilni tipovi u izrazu za mnozenje/deljenje.", null);
		 		RESULT = Tab.noType;
		 	} 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if (te.equals(t) && te == Tab.intType){
		 		RESULT = te;
		 		Code.put(op);
		 	}
		 	else {
		 		parser.report_error("Greska na liniji "+ teleft+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
		 		RESULT = Tab.noType;
		 	} 
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			
			if( ( (e1.getKind()==Struct.Class && e1.getKind()==Struct.Class) || (e1.getKind()==Struct.Array && e1.getKind()==Struct.Array) ) && (!r.equals("!=") && !r.equals("==")) )
				parser.report_error("Greska na liniji " + e1left + ": Kod klasnih tipova i nizova ne smeju se koristiti <, >, >=, <=  ", null);
			
			if(!e1.compatibleWith(e2))
				parser.report_error("Greska na liniji " + e1left + ": Tipovi u uslovnom izrazu nisu kompatibilni. Levo tip " + e1.getKind() + ", desno tip " + e2.getKind(), null);
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Matched ::= LBRACE OpenScope StatementList CloseScope RBRACE 
            {
              Object RESULT =null;
		 parser.statBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct d = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				parser.printCallCount++; 
			
				if(d.getKind()!=Struct.Int && d.getKind()!=Struct.Char && d.getKind()!=Struct.Bool){
					parser.report_error("Greska kod funkcije print(), ulazni parametri nisu tipa int, char ili bool!", null);
				}
				if(d==Tab.intType){
					Code.loadConst(n);
					Code.put(Code.print);
				}
				if(d==Tab.charType){
					Code.loadConst(n);
					Code.put(Code.bprint);
				}
				if(d==boolType){
					Code.loadConst(n);
					Code.put(Code.print);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct d = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				parser.printCallCount++; 
			
				if(d.getKind()!=Struct.Int && d.getKind()!=Struct.Char && d.getKind()!=Struct.Bool){
					parser.report_error("Greska kod funkcije print(), ulazni parametri nisu tipa int, char ili bool!", null);
				}
				if(d==Tab.intType){
					Code.loadConst(5);
					Code.put(Code.print);
				}
				if(d==Tab.charType){
					Code.loadConst(1);
					Code.put(Code.bprint);
				}
				if(d==boolType){
					Code.loadConst(5);
					Code.put(Code.print);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind()==Obj.Meth)
					parser.report_error("Greska na liniji " + dleft + ": Greska kod funkcije read(), ulazni parametri su funkcije!", null);
				if(d.getKind()==Obj.Con)
					parser.report_error("Greska na liniji " + dleft + ": Greska kod funkcije read(), ulazni parametar je konstanta!", null);
				else if(d.getType().getKind()!=Struct.Int && d.getType().getKind()!=Struct.Char && d.getType().getKind()!=Struct.Bool ){
					parser.report_error("Greska na liniji " + dleft + "Greska kod funkcije read(), ulazni parametri nisu tipa int, char ili bool!", null);					
				}
				
				Code.put(d.getType() == Tab.charType ? Code.bread : Code.read);
				Code.store(d);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			  	 returnFound = true;
				 Struct currMethType = currentMethod.getType();
				 if (!currMethType.compatibleWith(t)) {
				 	parser.report_error("Greska na liniji " + tleft + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName() + " (Ocekivano: Tip " + currMethType.getKind() + ", Return: Tip " +  t.getKind() + ")", null);
				 }
				 else{
				 	parser.report_info("Return je u redu na liniji " + tleft + " za tip " + currMethType.getKind() + " u funkciji " + currentMethod.getName(), null);
				 	Code.put(Code.exit);
	             	Code.put(Code.return_);
				 }	 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				returnFound = true;
				Struct currMethType = currentMethod.getType();
				if(currMethType!=Tab.noType){
					parser.report_error("Greska na liniji " + rleft + " : " + "Potrebno je vratiti tip " + currMethType.getKind() + " kao povratnu vrednost u funkciji " + currentMethod.getName() + ". Funkcija nije VOID!", null);
				}
				else{
					 parser.report_info("Return je u redu na liniji " + rleft + " za tip " + currMethType.getKind() + " u funkciji " + currentMethod.getName(), null);
				}
				Code.put(Code.exit);
	            Code.put(Code.return_);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int dummyleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dummyright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object dummy = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(!insideWhile)
					parser.report_error("Greska na liniji " + dummyleft + ": BREAK van WHILE", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= WHILE LPAREN NT$7 Condition RPAREN Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 insideWhile=false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$7 ::= 
            {
              Object RESULT =null;
 insideWhile=true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= Designator MINUSMINUS SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind()==Obj.Con){
					parser.report_error("Greska na liniji " + dleft + ": Ne moze se menjati vrednost konstante!", null);
				}
				
				if(d.getType().getKind()!=Struct.Int)
					parser.report_error("Operator -- mora se koristiti samo sa int tipom!", null);
				
				if(d.getKind()==Obj.Elem){
					Code.load(currentArray);
					Code.load(index);
				}
				
				Code.load(d);
				Code.put(Code.const_1);
				Code.put(Code.sub);
				Code.store(d);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= Designator PLUSPLUS SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind()==Obj.Con){
					parser.report_error("Greska na liniji " + dleft + ": Ne moze se menjati vrednost konstante!", null);
				}
				
				if(d.getType().getKind()!=Struct.Int){
					parser.report_error("Operator ++ mora se koristiti samo sa int tipom! Pokusavamo sa tipom " + d.getType().getKind(), null);
				}
				
				if(d.getKind()==Obj.Elem){
					Code.load(currentArray);
					Code.load(index);
				}
				
				Code.load(d);
				Code.put(Code.const_1);
				Code.put(Code.add);
				Code.store(d);
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= Designator LPAREN ActPars RPAREN SEMI 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 
				//sintaksna
				if(parser.mainScope) 
					parser.funcCallCountMain++; 
			
				int dest_adr=o.getAdr()-Code.pc; // racunanje relativne adrese 
                Code.put(Code.call); 
                Code.put2(dest_adr);
                if (o.getType()!=Tab.noType )
                	Code.put(Code.pop);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= Designator EQUALS error SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti"); if(--parser.errorCount==0) { parser.errorDetected=false; }  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= Designator EQUALS Expr SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(d.getKind()==Obj.Con){
					parser.report_error("Greska na liniji " + dleft + ": Ne moze se menjati vrednost konstante!", null);
				}
				if(!d.getType().compatibleWith(e) ){
					parser.report_error("Greska na liniji " + dleft +" : Nisu kompatibilni tipovi pri dodeli vrednosti." + "( Leva strana: Tip " + d.getType().getKind() + " Desna strana: Tip " + e.getKind() + " )", null);
				}
				Code.store(d);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormParsDecl ::= Type IDENT LSQBRACE RSQBRACE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					parser.formParsCounter++;
					hasMain=false; 
					RESULT = varName;
					
					if(Tab.currentScope.findSymbol(varName) != null)
				  		parser.report_error("Vec postoji identifikator " + varName, null);
			  		else {
			  			parser.report_info("Deklarisana promenljiva kao formalni parametar" + varName + " na liniji " + varNameleft, null);
						Tab.insert(Obj.Var, varName, currentType);
						Obj obj=Tab.find(currentMethod.getName());
						obj.setLevel(obj.getLevel()+1);
						RESULT=obj;
						
						Code.load(obj);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormParsDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
					parser.formParsCounter++;
					if(currentMethod.getName().equals("main"))
						hasMain=false;
						
					RESULT = varName;
					
					if(Tab.currentScope.findSymbol(varName) != null)
				  		parser.report_error("Vec postoji identifikator " + varName, null);
			  		else {
			  			parser.report_info("Deklarisana promenljiva " + varName + " kao formalni parametar na liniji " + varNameleft, null);
						Tab.insert(Obj.Var, varName, currentType);
						Obj obj=Tab.find(currentMethod.getName());
						obj.setLevel(obj.getLevel()+1);
						RESULT=obj;
						
						//Code.load(obj);
			  		}
				
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormParsList ::= FormParsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormParsList ::= FormParsList COMMA FormParsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= FormParsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeOrVoid ::= VOID 
            {
              Struct RESULT =null;
		
				RESULT = currentType=Tab.noType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeOrVoid ::= Type 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodDecl ::= TypeOrVoid IDENT NT$4 OpenScope LPAREN FormPars RPAREN VarDeclOpt LBRACE NT$5 StatementList RBRACE NT$6 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
 
			
			if (!returnFound && retType != Tab.noType)
			   	 parser.report_error("Semanticka greska na liniji " + methNameleft + ": funkcija " + methName + " nema return iskaz!", null);
			if (!returnFound && retType == Tab.noType)
			   	 parser.report_info("Funkcija " + methName + " nema return, ali to je u redu, jer je funkcija VOID!", null);
			
			Tab.chainLocalSymbols(currentMethod);
			
			if(parser.classScope)
				currentMethod.setLevel(currentMethod.getLevel()-1);
            	
                
            if (currentMethod.getType()!=Tab.noType) {
            	Code.put(Code.trap); 
            	Code.put(1);
            }
            else{
            	Code.put(Code.exit); 
                Code.put(Code.return_);
            }
			
				
			returnFound = false;
			currentMethod = null;
			
			if(!parser.globalScope && !parser.classScope){
				parser.methodCount++; 
			} 
			parser.mainScope=false; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

				
				Code.put(Code.enter);
				Code.put(currentMethod.getLevel());
				Code.put(Tab.currentScope.getnVars());
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$4 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
			   	currentMethod = Tab.insert(Obj.Meth, methName, currentType);
			   	currentMethod.setAdr( Code.pc );
			   	parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
				if(methName.equals("main") && retType==Tab.noType){
					hasMain=true;
					parser.mainScope=true;
					Code.mainPc = currentMethod.getAdr();
				}
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarDeclOpt ::= 
            {
              Object RESULT =null;
		 
					if(parser.globalScope) 
						parser.globalScope=!parser.globalScope; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarDeclOpt ::= VarDeclOpt VarDeclMethod 
            {
              Object RESULT =null;
		 
					if(parser.globalScope) 
						parser.globalScope=!parser.globalScope; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclMethod ::= Type error 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclMethod ::= Type error SEMI 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclMethod ::= Type VarListLocal error 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDeclMethod ::= Type VarListLocal error SEMI 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDeclMethod ::= Type VarListLocal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDeclMethod ::= Type VarListLocal SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclMethod",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclOpt ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExtendsOpt ::= EXTENDS Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = Tab.find(type.toString());
					/*if(obj==Tab.noObj)
						parser.report_error("Neuspesno izvodjenje iz tipa " + type.getKind() + " na liniji " + typeleft + ". Tip ne postoji!", null);
					else */
					if(type.getKind()!=Struct.Class){
						parser.report_error("Neuspesno izvodjenje iz tipa " + type.getKind() + " na liniji " + typeleft + ". Tip nije klasa!", null);
					}
					else{
						Obj baseClass = Tab.find(type.toString());
								
						for(Obj o:type.getMembers()){
							if(o.getKind()==Obj.Meth){
								Tab.openScope();
								
								for(Obj mo:o.getLocalSymbols()){
									Tab.insert(mo.getKind(), mo.getName(), mo.getType());
								}
								Tab.chainLocalSymbols(o);
								Tab.closeScope();
							}
							
							Tab.insert(o.getKind(), o.getName(), o.getType());
						}
						
						//SymbolDataStructure members = type.getMembersTable();
						
						//currentClass.getType().setMembers(members);
						//Tab.chainLocalSymbols(currentClass.getType());
						
						parser.report_info("Uspesno izvodjenje iz tipa " + type.getKind() + " na liniji " + typeleft, null);		 
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= CLASS IDENT NT$2 OpenScope ExtendsOpt LBRACE VarDeclOpt MethodDeclOpt RBRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
 
				parser.classCount++; 
				parser.globalScope=true; 
				parser.classScope=false;
				Tab.chainLocalSymbols(currentClass.getType());
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$2 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
				Obj obj = Tab.find(className);
				if (obj != Tab.noObj){
					parser.report_error("Ne moze se deklarisati klasa " + className + " jer je to ime vec u tabeli simbola!", null);
				}
				else{
					parser.classScope=true;
					RESULT = currentClass = Tab.insert(Obj.Type, className, new Struct(Struct.Class));
					parser.report_info("Deklarisana klasa " + className + " na liniji " + classNameleft, null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstOr ::= BOOLCONST 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			RESULT = new Obj(Obj.Con, "", boolType);  
 	    	RESULT.setAdr(val ? 1:0);
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstOr",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstOr ::= STRCONST 
            {
              Obj RESULT =null;
		 
			Obj c= new Obj(Obj.Con, "", stringType);
			RESULT = c;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstOr",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstOr ::= CHARCONST 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			RESULT = new Obj(Obj.Con, "", Tab.charType);
			RESULT.setAdr(val); 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstOr",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstOr ::= NUMBER 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			RESULT = new Obj(Obj.Con, "", Tab.intType); ;
			RESULT.setAdr((int)val);
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstOr",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstPart ::= IDENT EQUALS ConstOr 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
				if(Tab.currentScope.findSymbol(constName) != null)
				  	parser.report_error("Vec postoji identifikator " + constName, null);
			  	else {
			  		if(!currentType.compatibleWith(o.getType())){
			  			parser.report_error("Greska na liniji " + constNameleft +": Konstanta " + constName + " je tipa " + currentType.getKind() + " a dodeljena vrednost je tipa " + o.getKind() , null);
			  		}
			  		else{
				  		Obj con = Tab.insert(Obj.Con, constName, currentType);
				  		Code.dataSize++;
				  		con.setAdr(o.getAdr());
				  		parser.report_info("Deklarisana konstanta " + constName + " na liniji " + constNameleft, null);
			  		}
			  	}
				
				
			
				if(parser.globalScope) 
					parser.globConstCount++; 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstPart",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ConstList ::= ConstPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ConstList ::= ConstList COMMA ConstPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		
		Obj typeNode = Tab.find(typeName);
		
		if(typeNode==Tab.noObj){
			parser.report_error("Greska na liniji " + typeNameleft + ", nije pronadjen tip " + typeName + " u tabeli simbola.", null);
			RESULT = Tab.noType;
		}
		else{
			if(Obj.Type==typeNode.getKind()){
				RESULT = typeNode.getType();
				currentType = typeNode.getType();
			}
			else{
				parser.report_error("Greska na liniji " + typeNameleft + ": Ime " + typeName + " ne predstavlja tip.", null);
				RESULT = Tab.noType;
			}
		}
		
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarPart ::= IDENT LSQBRACE RSQBRACE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
	        	
	        	if(Tab.currentScope.findSymbol(varName) != null)
				  	parser.report_error("Vec postoji identifikator " + varName, null);
			  	else {
			  		parser.report_info("Deklarisan niz " + varName + " na liniji " + varNameleft, null);
					RESULT=Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
					
					if(parser.classScope)
						RESULT=Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, currentType));
					else{
						RESULT=Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
						Code.dataSize++;
					}
			  	}
	        
	        	if(parser.globalScope) 
	        		parser.globArrayCount++; 
	        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarPart ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
				if(Tab.currentScope.findSymbol(varName) != null)
				  	parser.report_error("Greska na liniji " + varNameleft +": Vec postoji identifikator " + varName, null);
			  	else {
			  		parser.report_info("Deklarisana promenljiva " + varName + " na liniji " + varNameleft, null);
					if(parser.classScope)
						RESULT=Tab.insert(Obj.Fld, varName, currentType);
					else{
						RESULT=Tab.insert(Obj.Var, varName, currentType);
						Code.dataSize++;
					}
			  	}
				
				if(parser.globalScope && !parser.classScope) { 
					parser.globVarCount++; 
					parser.log.info("Pronadjena globalna promenljiva"); 
				} 
				else if(parser.mainScope) { 
					parser.locVarCountMain++; 
					parser.log.info("Pronadjena lokalna promenljiva u main funkciji");
				}
				else if(parser.classScope)
					parser.log.info("Pronadjena lokalna promenljiva u klasi"); 
				else 
					parser.log.info("Pronadjena lokalna promenljiva"); 
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPart",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarListLocal ::= error COMMA VarPart 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListLocal",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarListLocal ::= VarListLocal error COMMA VarPart 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji lokalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListLocal",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarListLocal ::= VarPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListLocal",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarListLocal ::= VarListLocal COMMA VarPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListLocal",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarListGlobal ::= error COMMA VarPart 
            {
              Object RESULT =null;
		
					parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }	
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListGlobal",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarListGlobal ::= VarListGlobal error COMMA VarPart 
            {
              Object RESULT =null;
		 
					parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive"); 
					if(--parser.errorCount==0) { parser.errorDetected=false; }
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListGlobal",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarListGlobal ::= VarPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListGlobal",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarListGlobal ::= VarListGlobal COMMA VarPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarListGlobal",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDeclGlobal ::= Type error SEMI 
            {
              Object RESULT =null;
		
				parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive"); 
				if(--parser.errorCount==0) { parser.errorDetected=false; }
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclGlobal",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDeclGlobal ::= Type VarListGlobal error SEMI 
            {
              Object RESULT =null;
		 
				parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive"); 
				if(--parser.errorCount==0) { parser.errorDetected=false; }
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclGlobal",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclGlobal ::= Type VarListGlobal SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclGlobal",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramListItem ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramListItem",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramListItem ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramListItem",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramListItem ::= VarDeclGlobal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramListItem",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramList ::= ProgramList ProgramListItem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM ProgramName OpenScope ProgramList LBRACE MethodDeclList NT$0 RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
				if(!hasMain) 
					parser.report_error("Program nema funkciju void main bez parametara!", null); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

			 	p.setLocals(Tab.currentScope.getLocals());
	   //      	Code.dataSize=Tab.currentScope.getnVars();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

